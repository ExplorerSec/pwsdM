#include <bits/stdc++.h>
#include <conio.h>
#include <Windows.h>
#include <random>
const char InfoFileD[]="info.dat";//info文件路径
const int LengthMinOrder=5;//指令简写
const int LengthOrder=20;//指令全写
const char APPversion[]="@title pswdM 0.0.4 beta";//版本号

/*程序界面初始化，掩盖真实路径，优化视图*/
void AppInit()
{	
	system(APPversion);
	system("@color 0a");
	system("cls");
}
/*指令简写对照格式*/
struct order_struct {
	char MinOrder[LengthMinOrder];
	char Order[LengthOrder];
};
/*密码储存格式*/
struct mm_struct {
	char fileName[50] = "file404";
	char mm_account[50] = "account404";
	char mm_password[50] = "password404";
	char mm_web[100] = "web404";
	char mm_name[50] = "name404";
	char mm_phone[50] = "number404";
} str_mm;
/*剪切板写入函数*/
int setClipbar(const char *data) {
	int contentSize = strlen(data) + 1;
	HGLOBAL hMemory;
	LPTSTR lpMemory;
	if (!OpenClipboard(NULL)) return 0; /* 打开剪切板 */
	if (!EmptyClipboard()) return 0; /* 清空剪切板 */
	if (!(hMemory = GlobalAlloc(GMEM_MOVEABLE, contentSize))) return 0; /* 对剪切板分配内存 */
	if (!(lpMemory = (LPTSTR)GlobalLock(hMemory))) return 0; /* 锁定内存区域 */
	memcpy_s(lpMemory, contentSize, data, contentSize);    /* 复制数据到内存区域 */
	GlobalUnlock(hMemory);                                 /* 解除内存锁定 */
	if (!SetClipboardData(CF_TEXT, hMemory)) return 0;     /* 设置剪切板数据 */
	//printf("成功复制【%s】到剪切板，字符串长度为%d。\n",data,contentSize);
	CloseClipboard();/* 关闭剪切板 */
	return 1;
}
/*密码信息文件读取函数*/
int FileRead(const char *filename, mm_struct *str) {
	
	FILE *fp = NULL;
	fp = fopen(filename, "r");
	fscanf(fp, "%s", str->fileName); //0
	fscanf(fp, "%s", str->mm_account); //1
	fscanf(fp, "%s", str->mm_password); //2
	fscanf(fp, "%s", str->mm_web); //3
	fscanf(fp, "%s", str->mm_name); //4
	fscanf(fp, "%s", str->mm_phone); //5
	fclose(fp);
	fp = NULL;
	return 0;
}
/*记录密码文件的信息文件的读取函数*/ /*暂时需要下方补丁*/
int FileInfoRead(const char *filename,  order_struct Orders[]) {
	int FileNum = 0;
	FILE *fp = NULL;
	fp = fopen(filename, "r");
	fscanf(fp, "%d", &FileNum);
	for (int i = 0; i < FileNum; i++) {
		fscanf(fp, "%s", Orders[i].MinOrder);
		fscanf(fp, "%s", Orders[i].Order);
		//if (EnableSee)printf("%s %s\n", Orders[i].MinOrder, Orders[i].Order);
	}
	fclose(fp);
	fp = NULL;
	return FileNum;
}
/*记录密码文件的信息文件的读取函数-补丁-读取数目*/
int FileSumFromInfoRead(const char *filename) {
	int FileNum = 0;
	FILE *fp = fopen(filename, "r");
	fscanf(fp, "%d", &FileNum);
	fclose(fp);
	fp = NULL;
	return FileNum;
}
/*随机数产生函数*/
int RandomNumber(int min, int max)
{
	std::random_device seed;//硬件生成随机数种子
	std::ranlux48 engine(seed());//利用种子生成随机数引擎
	std::uniform_int_distribution<> distrib(min, max);//设置随机数范围，并为均匀分布
	int random = distrib(engine);//随机数
	return random;
}
/*身份验证模块*/
int AppHello()
{
	system("@title 身份验证");
	/*弱权限模块*/
	int randnumber=RandomNumber(111112,999998);int ifuser;
	printf("##Login## \n#Account: %d\n#Passwrd: ",randnumber);
	ifuser=(100-randnumber%100)*100+(randnumber/100000*7);
	
	/*更新密码读入模块*/
	char tmp=0;randnumber=0;
	do{
		randnumber*=10;
		if(tmp)randnumber+=tmp-'0';
		tmp=_getch();
	}while(tmp!='\r'&&tmp!='\n');
	printf("%d %d",randnumber,ifuser);
	if(randnumber!=ifuser)
	{
		printf("# Error 403 \n\n##Wrong password!##\n");
		return 1;
	}
	else
	{
		return 0;
	}
}
/*下方为base64模块*/
//std::string Code("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
std::string Code("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
/*base64编码*/
std::string Base64Encode(std::string data)
{
	size_t len = data.size() / 3;
	std::string out;
	const unsigned char* input = (unsigned char*)data.data();
	
	for (size_t i = 0; i < len; i++){
		out += Code[input[0] >> 2];
		out += Code[((input[0] & 0x03) << 4 )+ (input[1] >> 4)];
		out += Code[((input[1] & 0x0f) << 2) + (input[2] >> 6)];
		out += Code[input[2] & 0x3f];
		input += 3;
	}
	
	len = data.size();
	if (len % 3 == 1) {
		out += Code[input[0] >> 2];
		out += Code[(input[0] & 0x03) << 4];
		out += "==";
	}
	else if (len % 3 == 2) {
		out += Code[input[0] >> 2];
		
		out += Code[((input[0] & 0x03) << 4) + (input[1] >> 4)];
		out += Code[(input[1] & 0x0f) << 2];
		out += "=";
	}
	
	return out;
}

unsigned char GetBaseValue(char data)
{
	if (data > 'a' - 1) {
		return data - 'a' + 26;
	}
	else if (data > 'A' - 1) {
		return data - 'A';
	}
	else if (data > '0' - 1) {
		return data - '0' + 52;
	}
	else if (data == '+') {
		return 62;
	}
	else if (data == '/') {
		return 63;
	}
	return 0;
}
/*base64解码*/
std::string Base64Decode(std::string data)
{
	std::string out;
	unsigned char value[4];
	size_t len = data.size() / 4 - 1;
	const unsigned char* input = (unsigned char*)data.data();
	for (size_t i = 0; i < len; i++) {    
		value[0] = GetBaseValue(input[0]);
		value[1] = GetBaseValue(input[1]);
		value[2] = GetBaseValue(input[2]);
		value[3] = GetBaseValue(input[3]);
		input += 4;
		
		out.push_back((value[0] << 2) + (value[1] >> 4));
		out.push_back((value[1] << 4) + (value[2] >> 2));
		out.push_back((value[2] << 6) + value[3]);
	}
	value[0] = GetBaseValue(input[0]);
	value[1] = GetBaseValue(input[1]);
	out.push_back((value[0] << 2) + (value[1] >> 4));
	if (input[2] != '=') {
		value[2] = GetBaseValue(input[2]);
		out.push_back((value[1] << 4) + (value[2] >> 2));
	}
	if (input[3] != '=') {
		value[3] = GetBaseValue(input[3]);
		out.push_back((value[2] << 6) + value[3]);
	}
	
	return out;
}
int main(int argc,char **argv)
{
	if((argc-1)&&argv[1][0]=='-'&&argv[1][1]=='0')printf("welcome, PreUser!\n");else //命令行快捷登录，不安全可删去
		if(AppHello())return 0;//身份验证
	AppInit();//程序初始化
	
	/*记录命令数目与命令对照关系*/
	char TerminalOrder[20];
	int FileNum = FileSumFromInfoRead(InfoFileD);
	if(!FileNum)//没有密码储存文件
	{
		printf("# Error 404-0\n\n##Local Files for Password NOT Found!##");
		return 0;
	}
	order_struct Orders[FileNum];
	FileInfoRead(InfoFileD,  Orders);
	/*指令读取循环*/
	bool whileflag1 = 1;
	while (whileflag1) {
		printf("\n$$");
		scanf("%s", TerminalOrder);
		if (!strcmp(TerminalOrder, "ls")) {
			printf("\n");
			for(int i=0;i<FileNum;i++)
				printf("%s %s\n",Orders[i].MinOrder, Orders[i].Order);
			continue;
		}else if (!strcmp(TerminalOrder, "cls")) {
			system("cls");
			continue;}
		else {
			/*进入一级指令文件匹配循环*/
			bool FirstOrderMatch=1;//进入匹配的标志,修复离开二级指令循环时弹出一级指令不存在的bug
			int i = 0;
			for (i = 0; i < FileNum; i++){
				if (!strcmp(TerminalOrder, Orders[i].MinOrder)) {			
					FileRead(Orders[i].Order,&str_mm);//密码文件读取
					FirstOrderMatch=0;
					
					std::string pswd_f[6][2];
					pswd_f[0][0]=str_mm.fileName;
					pswd_f[1][0]=str_mm.mm_account;
					pswd_f[2][0]=str_mm.mm_password;
					pswd_f[3][0]=str_mm.mm_web;
					pswd_f[4][0]=str_mm.mm_name;
					pswd_f[5][0]=str_mm.mm_phone;
					pswd_f[0][1]="<< Filename copied!";
					pswd_f[1][1]="<< Account copied!";
					pswd_f[2][1]="<< Password copied!";
					pswd_f[3][1]="<< Website copied!";
					pswd_f[4][1]="<< Name copied!";
					pswd_f[5][1]="<< Phone copied!";
					/*二级指令读取循环*/
					bool whileflag2 = 1;
					while(whileflag2){
						int x=-1;
						printf("\n>>");
						scanf("%d", &x);
						if(x>7||x<0)
						{
							printf("<< Error 404-2\n");
						}
						else if(x==6)break;
						else{
							setClipbar((Base64Decode(pswd_f[x][0])).c_str());
							std::cout<<pswd_f[x][1];
						}
					}
					
					
					
				}		
			}
			if(FirstOrderMatch)printf("<< Error 404-1\n");	
		}
	}
	return 0;
	
}
/*更新记录*/
//0.0.2版本
//202210221454二级指令改为字符型，存在死循环bug，改回int
//202210221519弱权限模块
//202210221519兼容性路径
//0.0.3版本
//202210221618随机数产生器优化
//202210261640界面优化
//202210261649解决二级返回一级的吞字符bug
//202210261706本地密码文件报错功能
//202211221420密码不显示设置
//过渡版本
//202212211642快捷登录
//0.0.4版本
//202301032129未完成版本
